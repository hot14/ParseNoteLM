# Task ID: 3
# Title: 데이터베이스 스키마 설계 및 구현
# Status: done
# Dependencies: 1
# Priority: high
# Description: 사용자, 프로젝트, 문서, 임베딩 및 채팅 기록을 위한 데이터베이스 스키마를 생성합니다.
# Details:
1. ORM으로 SQLAlchemy 2.0 사용
2. User, Project, Document, Embedding 및 ChatHistory 모델 구현
3. Alembic을 사용한 데이터베이스 마이그레이션 설정
4. 임베딩 저장을 위한 pgvector 확장 구성
5. 성능 향상을 위한 데이터베이스 연결 풀링 구현
6. 자주 쿼리되는 필드에 대한 인덱스 생성
7. 관련 모델에 대한 소프트 삭제 구현

# Test Strategy:
1. 각 모델에 대한 단위 테스트
2. 데이터베이스 마이그레이션 테스트
3. 샘플 임베딩으로 pgvector 기능 확인
4. 쿼리 성능 벤치마크
5. 각 모델에 대한 CRUD 작업 테스트

# Subtasks:
## 1. 프로젝트 모델 설계 [done]
### Dependencies: None
### Description: 사용자별 최대 3개의 프로젝트를 저장할 수 있는 프로젝트 모델을 설계합니다.
### Details:
사용자 ID, 프로젝트 이름, 생성 날짜, 수정 날짜 등의 필드를 포함합니다. 사용자당 프로젝트 수 제한을 구현하는 로직을 고려합니다.

## 2. 문서 모델 설계 [done]
### Dependencies: 3.1
### Description: 프로젝트별 최대 5개의 문서를 저장할 수 있는 문서 모델을 설계합니다.
### Details:
프로젝트 ID, 문서 제목, 내용, 생성 날짜, 수정 날짜 등의 필드를 포함합니다. 프로젝트당 문서 수 제한을 구현하는 로직을 고려합니다.

## 3. 임베딩 모델 설계 [done]
### Dependencies: 3.2
### Description: 문서 분할된 청크별 임베딩을 저장할 수 있는 임베딩 모델을 설계합니다.
### Details:
문서 ID, 청크 ID, 임베딩 벡터, 생성 날짜 등의 필드를 포함합니다. 대용량 벡터 데이터 저장 방식을 고려합니다.

## 4. 채팅 기록 모델 설계 [done]
### Dependencies: 3.1
### Description: 질의응답 기록을 저장할 수 있는 채팅 기록 모델을 설계합니다.
### Details:
사용자 ID, 프로젝트 ID, 질문, 답변, 타임스탬프 등의 필드를 포함합니다. 효율적인 검색을 위한 인덱싱 전략을 고려합니다.

## 5. 마이그레이션 설정 [done]
### Dependencies: 3.1, 3.2, 3.3, 3.4
### Description: 데이터베이스 스키마 변경을 위한 마이그레이션 설정을 구성합니다.
### Details:
각 모델에 대한 마이그레이션 파일을 생성하고, 마이그레이션 순서를 정의합니다. 롤백 전략도 고려합니다.

## 6. 관계 설정 [done]
### Dependencies: 3.1, 3.2, 3.3, 3.4
### Description: 모델 간의 관계를 정의하고 설정합니다.
### Details:
외래 키 관계를 설정하고, 캐스케이드 삭제 등의 옵션을 고려합니다. 성능 최적화를 위한 인덱싱 전략을 수립합니다.

## 7. 제약조건 설정 [done]
### Dependencies: 3.1, 3.2, 3.3, 3.4, 3.6
### Description: 각 모델에 대한 제약조건을 정의하고 설정합니다.
### Details:
유니크 제약조건, NOT NULL 제약조건, 체크 제약조건 등을 설정합니다. 데이터 무결성을 보장하기 위한 트리거나 저장 프로시저의 필요성을 검토합니다.

