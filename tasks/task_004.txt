# Task ID: 4
# Title: 파일 업로드 및 처리 구현
# Status: done
# Dependencies: 2, 3
# Priority: high
# Description: PDF 및 TXT 파일을 업로드하고, 텍스트를 추출하며, 문서 정보를 저장하는 시스템을 만듭니다.
# Details:
1. 파일 업로드 처리를 위한 FastAPI의 UploadFile 사용
2. 파일 크기 및 유형 유효성 검사 구현 (최대 10MB, PDF/TXT만 허용)
3. PDF 텍스트 추출을 위한 PyPDF2 4.0 사용
4. 비동기 파일 처리를 위한 Celery 5.3을 사용한 백그라운드 작업 시스템 구현
5. 추출된 텍스트 및 메타데이터를 Document 모델에 저장
6. 기본 오류 처리 및 로깅 구현
7. 파일 처리를 위한 간단한 진행 상황 추적 메커니즘 생성

# Test Strategy:
1. 파일 유효성 검사 로직에 대한 단위 테스트
2. 파일 업로드 및 처리 흐름에 대한 통합 테스트
3. 다양한 PDF 형식 및 크기 테스트
4. 추출된 텍스트 및 메타데이터의 올바른 저장 확인
5. 손상되거나 지원되지 않는 파일에 대한 오류 처리 테스트

# Subtasks:
## 1. 파일 업로드 UI 구현 [done]
### Dependencies: None
### Description: 사용자가 파일을 선택하고 업로드할 수 있는 인터페이스 개발
### Details:
드래그 앤 드롭 기능 및 파일 선택 버튼 구현, 다중 파일 선택 지원

## 2. 파일 유효성 검사 [done]
### Dependencies: 4.1
### Description: 업로드된 파일의 형식, 크기, 내용 등을 검증하는 로직 구현
### Details:
허용된 파일 형식 및 크기 제한 설정, 악성 파일 탐지 기능 추가

## 3. 파일 저장 시스템 구축 [done]
### Dependencies: 4.2
### Description: 업로드된 파일을 서버 또는 클라우드 스토리지에 안전하게 저장하는 시스템 개발
### Details:
파일 암호화, 중복 파일 처리, 저장 경로 관리 기능 구현

## 4. 파일 처리 큐 시스템 구현 [done]
### Dependencies: 4.3
### Description: 대용량 파일 및 다중 파일 업로드를 효율적으로 처리하기 위한 큐 시스템 개발
### Details:
작업 우선순위 설정, 병렬 처리 지원, 실패한 작업 재시도 기능 구현

## 5. 파일 형식별 처리 로직 구현 [done]
### Dependencies: 4.4
### Description: 다양한 파일 형식(이미지, 문서, 비디오 등)에 대한 개별 처리 로직 개발
### Details:
이미지 리사이징, 문서 텍스트 추출, 비디오 인코딩 등 형식별 처리 기능 구현

## 6. 처리 상태 모니터링 시스템 구축 [done]
### Dependencies: 4.4, 4.5
### Description: 파일 업로드 및 처리 과정의 진행 상황을 실시간으로 모니터링하는 시스템 개발
### Details:
처리 단계별 상태 업데이트, 에러 로깅, 사용자에게 진행 상황 표시 기능 구현

## 7. 처리 완료 후 결과 제공 기능 구현 [done]
### Dependencies: 4.5, 4.6
### Description: 파일 처리가 완료된 후 결과를 사용자에게 제공하는 기능 개발
### Details:
처리된 파일 다운로드 링크 생성, 처리 결과 요약 제공, 이메일 알림 기능 구현

